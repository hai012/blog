vmlinux: scripts/link-vmlinux.sh \
                                  \
         arch/$(SRCARCH)/kernel/vmlinux.lds \
		                                         \
         arch/arm/kernel/head$(MMUEXT).o \
		 init/built-in.o \
		                                                    \
         usr/built-in.o kernel/built-in.o mm/built-in.o fs/built-in.o ipc/built-in.o security/built-in.o crypto/built-in.o block/built-in.o
         lib/lib.a lib/built-in.o  drivers/built-in.o sound/built-in.o firmware/built-in.o net/built-in.o 

	+$(call if_changed,link-vmlinux)
	+$(call $(if $(strip $(any-prereq) $(arg-check)), @set -e;  $(echo-cmd) $(cmd_link-vmlinux);   echo 'cmd_$@ := $(make-cmd)' > $(dot-target).cmd),link-vmlinux)
	+$(call @set -e;  $(echo-cmd) $(cmd_link-vmlinux);   echo 'cmd_$@ := $(make-cmd)' > $(dot-target).cmd ,link-vmlinux)
	+@set -e;    echo '  LINK    vmlinux ';   /bin/bash scripts/link-vmlinux.sh  arm-linux-ld -EL  -p --no-undefined -X  --build-id;   echo 'cmd_vmlinux := /bin/bash' >  ./.vmlinux.cmd
	
make-cmd = $(subst \#,\\\#,$(subst $$,$$$$,$(call escsq,$(cmd_link-vmlinux))))
make-cmd = $(subst \#,\\\#,$(subst $$,$$$$,$(call escsq,$(cmd_link-vmlinux))))
escsq = $(subst $(squote),'\$(squote)',/bin/bash)
make-cmd = $(subst \#,\\\#,$(subst $$,$$$$,/bin/bash))
make-cmd = /bin/bash

dot-target = $(dir $@).$(notdir $@)
dot-target = $(dir vmlinux).$(notdir vmlinux)
dot-target = ./.vmlinux




any-prereq = $^


arg-check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) $(filter-out $(cmd_$@),   $(cmd_$(1))) )
arg-check = $(filter-out $(cmd_$(1)), $(cmd_$@)) $(filter-out $(cmd_$@),   $(cmd_$(1)))
arg-check = $(filter-out $(cmd_link-vmlinux), $(cmd_vmlinux)) $(filter-out $(cmd_vmlinux),   $(cmd_link-vmlinux))
arg-check = $(filter-out $(cmd_link-vmlinux), ) $(filter-out $(cmd_vmlinux),   )
arg-check = 

cmd_link-vmlinux = $(CONFIG_SHELL) $< $(LD) $(LDFLAGS) $(LDFLAGS_vmlinux)
cmd_link-vmlinux =  /bin/bash scripts/link-vmlinux.sh  arm-linux-ld -EL  -p --no-undefined -X  --build-id
CONFIG_SHELL := /bin/bash
LD = arm-linux-ld -EL
LDFLAGS =
LDFLAGS_vmlinux	:=-p --no-undefined -X $(LDFLAGS_BUILD_ID)
LDFLAGS_vmlinux	:=-p --no-undefined -X  --build-id



LDFLAGS_BUILD_ID = $(patsubst -Wl$(comma)%,%,\
			      $(call cc-ldoption, -Wl$(comma)--build-id,))
LDFLAGS_BUILD_ID = --build-id
cc-ldoption = $(call try-run,$(CC) $(1) -nostdlib -xc /dev/null -o "$$TMP",$(1),$(2))
cc-ldoption = $(call try-run, arm-linux-gcc  -Wl  -nostdlib -xc /dev/null -o "$$TMP", -Wl ,--build-id)
cc-ldoption = $(call try-run, arm-linux-gcc  -Wl  -nostdlib -xc /dev/null -o "$$TMP", -Wl ,--build-id)
cc-ldoption = --build-id

try-run = $(shell set -e;TMP="$(TMPOUT).$$$$.tmp";TMPO="$(TMPOUT).$$$$.o";if ($(1)) >/dev/null 2>&1;then echo "$(2)";else echo "$(3)";fi;rm -f "$$TMP" "$$TMPO")
try-run = $(shell set -e;TMP=".4412.tmp";TMPO=".4412.o";if  arm-linux-gcc  -Wl  -nostdlib -xc /dev/null -o "$$TMP" >/dev/null 2>&1;then echo " -Wl ";else echo "--build-id";fi;rm -f "$$TMP" "$$TMPO")
try-run = --build-id


TMPOUT := $(if $(KBUILD_EXTMOD),$(firstword $(KBUILD_EXTMOD))/)
TMPOUT := 








LDFLAGS_BUILD_ID = $(patsubst -Wl$(comma)%,%,\
                              $(call cc-ldoption, -Wl$(comma)--build-id,))
comma = ,

cc-ldoption = $(call try-run,\
        $(CC) $(1) -nostdlib -xc /dev/null -o "$$TMP",$(1),$(2))

TMPOUT :=

try-run = $(shell set -e;               \
        TMP="$(TMPOUT).$$$$.tmp";       \
        TMPO="$(TMPOUT).$$$$.o";        \
        if ($(1)) >/dev/null 2>&1;      \
        then echo "$(2)";               \
        else echo "$(3)";               \
        fi;                             \
        rm -f "$$TMP" "$$TMPO")





echo-cmd = $(if $($(quiet)cmd_link-vmlinux),echo '  $(call escsq,$($(quiet)cmd_link-vmlinux))$(echo-why)';)
echo-cmd =echo '  $(call escsq,$(quiet_cmd_link-vmlinux)) $(call escsq, $(strip $(why)))';
echo-cmd =echo '  $(call escsq, LINK    $@) $(call escsq, )';
echo-cmd =echo '  $(call $(subst $(squote),'\$(squote)',$1), LINK    $@) $(call  $(subst $(squote),'\$(squote)',$1), )';
echo-cmd =echo '  LINK    $@ ';



quiet_cmd_link-vmlinux = LINK    $@
escsq = $(subst $(squote),'\$(squote)',$1)
echo-why = $(call escsq, $(strip $(why)))
echo-cmd = LINK    $@, echo '   LINK    $@$(call escsq, $(strip $(why)))';

