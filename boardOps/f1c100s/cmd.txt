https://wiki.sipeed.com/soft/Lichee/zh/Nano-Doc-Backup/build_sys/build_flash_copy.html#UBOOT%E7%BC%96%E8%AF%91



一、创建工作文件夹#
mkdir ~/LicheePi_Nano
cd ~/LicheePi_Nano
二、安装交叉编译链#
此处为获取7.2.1版本，您可获取其他版本或者通过链接直接下载

wget http://releases.linaro.org/components/toolchain/binaries/7.2-2017.11/arm-linux-gnueabi/gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi.tar.xz

tar -vxJf gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi.tar.xz

sudo cp -r ./gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi /opt/

sudo vim /etc/bash.bashrc
在文件末尾 添加以下内容

PATH="$PATH:/opt/gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi/bin"

使路径生效

source /etc/bash.bashrc

此时可用 arm-linux-gnueabi-gcc -v 进行测试；若普通用户状态下没有成功，通过 sudo su 切换到root用户再尝试；

三、安装必要的库#
sudo apt-get install build-essential subversion git-core libncurses5-dev zlib1g-dev gawk flex quilt libssl-dev xsltproc libxml-parser-perl mercurial bzr ecj cvs unzip lib32z1 lib32ncurses5 lib32bz2-1.0 -y

sudo apt-get install vim flex bison texinfo u-boot-tools lib32stdc++6 -y

sudo apt-get install libusb-1.0-0-dev

sudo apt-get install mtd-utils
四、安装sunxi-tools下载工具#
获取源码

git clone https://gitee.com/LicheePiNano/sunxi-tools.git

查看分支

cd sunxi-tools
git branch -a
切换到 Nano 分支

git checkout f1c100s-spiflash

五、编译并安装工具#
make && sudo make install

六、编译UBOOT#
6.1. UBOOT下载#
cd ~/LicheePi_Nano

git clone -b nano-lcd800480 https://gitee.com/LicheePiNano/u-boot.git

cd ~/LicheePi_Nano/u-boot
6.2. UBOOT编译#
make ARCH=arm f1c100s_nano_uboot_defconfig

make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- -j8
七、编译Linux#
7.1. Linux下载#
cd ~/LicheePi_Nano

git clone https://gitee.com/LicheePiNano/Linux.git

cd ~/LicheePi_Nano/Linux
7.2. Linux编译#
make ARCH=arm f1c100s_nano_linux_defconfig

make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- -j8

make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- -j16 INSTALL_MOD_PATH=out modules

make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- -j16 INSTALL_MOD_PATH=out modules_install
八、编译Buildroot#
8.1. Buildroot下载#
cd ~/LicheePi_Nano

wget https://buildroot.org/downloads/buildroot-2021.02.4.tar.gz

tar xvf buildroot-2021.02.4.tar.gz

cd ~/LicheePi_Nano/buildroot-2021.02.4
8.2. Buildroot安装依赖#
sudo apt-get install linux-headers-$(uname -r)

8.3. Buildroot编译#
make menuconfig

8.4. Buildroot配置#
- Target options
  - Target Architecture (ARM (little endian))
  - Target Variant arm926t
- Toolchain
  - C library (musl) # 使用musl减小最终体积
- System configuration
  - Use syslinks to /usr .... # 启用/bin, /sbin, /lib的链接
  - Enable root login # 启用root登录
  - Run a getty after boot # 启用登录密码输入窗口

make
九、制作烧录镜像#
下载脚本nano_flash_dd.sh

更改脚本权限

sudo su

chmod +x nano_flash_dd.sh
启动脚本

./nano_flash_dd.sh

执行烧录

sudo sunxi-fel -p spiflash-write 0 flashimg.bin








ghj@ghj-Lenovo-Legion-R7000-2020:~/work/f1c100s$ cat nano_flash_dd.sh
#!/bin/sh
UBOOT_FILE=./u-boot/u-boot-sunxi-with-spl.bin
DTB_FILE=./Linux/arch/arm/boot/dts/suniv-f1c100s-licheepi-nano.dtb
KERNEL_FILE=./Linux/arch/arm/boot/zImage
ROOTFS_FILE=./buildroot-2021.02.4/output/images/rootfs.tar
MOD_FILE=./Linux/out/lib/modules/4.15.0-rc8-licheepi-nano+

dd if=/dev/zero of=flashimg.bin bs=1M count=16 &&\
dd if=$UBOOT_FILE of=flashimg.bin bs=1K conv=notrunc &&\
dd if=$DTB_FILE of=flashimg.bin bs=1K seek=1024 conv=notrunc &&\
dd if=$KERNEL_FILE of=flashimg.bin bs=1K seek=1088 conv=notrunc &&\
mkdir rootfs
tar -xvf $ROOTFS_FILE -C ./rootfs &&\
cp -r $MOD_FILE rootfs/lib/modules/ &&\

#为根文件系统制作jffs2镜像包
#--pad参数指定 jffs2大小
#由此计算得到 0x1000000(16M)-0x10000(64K)-0x100000(1M)-0x400000(4M)=0xAF0000
mkfs.jffs2 -s 0x100 -e 0x10000 --pad=0xAF0000 -d rootfs/ -o jffs2.img &&\
dd if=jffs2.img of=flashimg.bin bs=1K seek=5184 conv=notrunc &&\
rm -rf rootfs &&\



默认的启动优先级
序号	启动介质	注意事项
1st	MicroSD Card/eMMC	只支持PF0 ~ PF5这六个脚复用为SDC0启动, 控制器支持到SD2.0和eMMC4.41，设备端可以使用主流的eMMC5.1(eMMC存储器可以向前兼容)
2nd	SPI Nor/Nand Flash	只支持PC0 ~ PC3这四个脚复用为SPI0启动, 支持标准SPI和DOUT模式, BROM启动时SPI Nand固定为1024字节/页，SPI Nor无特殊限制
3rd	BROM FEL Mode	以上介质都无启动代码时，自动运行芯片内部USB程序(FEL Mode)(USB Full-Speed@12Mbps)，USB脚是固定的无其它复用功能
F1C100S手册未提及芯片启动顺序，但可以参考全志V3S的手册，F1C100S没有强制进入烧写模式的专用引脚，可以将SDC0_CMD或SPI0_CS/SPI0_DOUT强制接地干扰已经固化在eMMC/Nor-Flash中的SPL启动，让芯片进入USB-FEL下载模式。


‌F1C100S片上DDR的默认地址范围是0x30000000到0x3FFFFFFF‌
0x80000000

0x80008000 kernel
0x80C00000 dtb 

0x82000000


bootargs=console=ttyS0,115200 panic=5 rootwait root=/dev/mtdblock3 rw rootfstype=jffs2
bootcmd=sf probe 0 50000000; sf read 0x80C00000 0x100000 0x4000; sf read 0x80008000 0x110000 0x400000; bootz 0x80008000 - 0x80C00000

sf probe
sf erase 0 1000
sf erase 0 100000
sudo sunxi-tools/sunxi-fel -p spiflash-write 

sudo sunxi-tools/sunxi-fel -p spiflash-write 0 flashimg.bin
sudo sunxi-tools/sunxi-fel -p spiflash-write 0 ./u-boot/u-boot-sunxi-with-spl.bin
sudo sunxi-tools/sunxi-fel -p spiflash-write 0x100000 ./Linux/arch/arm/boot/dts/suniv-f1c100s-licheepi-nano.dtb
sudo sunxi-tools/sunxi-fel -p spiflash-write 0x110000 ./Linux/arch/arm/boot/zImage
sudo sunxi-tools/sunxi-fel -p spiflash-write 0x510000 jffs2.img



vim u-boot/include/configs/sunxi-common.h

#elif defined(CONFIG_MACH_SUNIV)
#define SDRAM_OFFSET(x) 0x8##x

#elif defined(CONFIG_MACH_SUNIV)
/*
 * 32M RAM minus 1MB heap + 8MB for u-boot, stack, fb, etc.
 * 8M uncompressed kernel, 4M compressed kernel, 512K fdt,
 * 512K script, 512K pxe and the ramdisk at the end.
 */
#define BOOTM_SIZE     __stringify(0x1700000)
#define KERNEL_ADDR_R  __stringify(SDRAM_OFFSET(0500000))
#define FDT_ADDR_R     __stringify(SDRAM_OFFSET(0C00000))
#define SCRIPT_ADDR_R  __stringify(SDRAM_OFFSET(0C50000))
#define PXEFILE_ADDR_R __stringify(SDRAM_OFFSET(0D00000))
#define RAMDISK_ADDR_R __stringify(SDRAM_OFFSET(0D50000))

#define MEM_LAYOUT_ENV_SETTINGS \
        "bootm_size=" BOOTM_SIZE "\0" \
        "kernel_addr_r=" KERNEL_ADDR_R "\0" \
        "fdt_addr_r=" FDT_ADDR_R "\0" \
        "scriptaddr=" SCRIPT_ADDR_R "\0" \
        "pxefile_addr_r=" PXEFILE_ADDR_R "\0" \
        "ramdisk_addr_r=" RAMDISK_ADDR_R "\0"

bootm_size=            0x1700000
kernel_addr_r=       0x80500000
fdt_addr_r=            0x80C00000
scriptaddr=            0x80C50000
pxefile_addr_r=      0x80D00000
ramdisk_addr_r=    0x80D50000


sunxi-fel -v uboot u-boot-sunxi-with-spl.bin \
             write $kernel_addr_r 0x80500000\
             write 0x80C00000 sun7i-a20-cubietruck.dtb \
             write 0x43100000 boot.scr \
             write 0x43300000 rootfs.cpio.lzma.uboot


echo '
#! /bin/sh
mount -t configfs none /sys/kernel/config
echo 0x18d1 > idVendor
echo 0x4e42 > idProduct
echo "buildroot" > iSerialNumber
mkdir -p /dev/usb-ffs/adb
mount -t functionfs adb /dev/usb-ffs/adb -o uid=2000,gid=2000
adbd & '>/etc/init.d/S50adbd

ccflags-y += -DDEBUG

echo '
#! /bin/sh
modprobe g_ffs idVendor=0x18d1 idProduct=0x4e42 iSerialNumber="buildroot"
mkdir -p /dev/usb-ffs/adb
mount -t functionfs adb /dev/usb-ffs/adb -o uid=2000,gid=2000
adbd & '>/etc/init.d/S50adbd
chmod +x /etc/init.d/S50adbd


echo peripheral  > /sys/devices/platform/soc/1c13000.usb/musb-hdrc.1.auto/mode
cat /sys/devices/platform/soc/1c13000.usb/musb-hdrc.1.auto/mode













