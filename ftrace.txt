








# 追踪事件，开启所有事件监听
echo 1 > /sys/kernel/debug/tracing/events/enable
# 追踪事件，开启调度事件监听
echo 1 > /sys/kernel/debug/tracing/events/sched/enable
echo sched > set_event


# 追踪进程
echo $$ > /sys/kernel/debug/tracing/set_ftrace_pid


#追踪函数，设置需要追踪的内核函数为 test_proc_show
echo test_proc_show > /sys/kernel/debug/tracing/set_graph_function


#停止采集
echo 0 > /sys/kernel/debug/tracing/tracing_on

# 查看/选择tracer
root@localhost:/mnt/samba/tmp# cat /sys/kernel/debug/tracing/available_tracers
blk function_graph wakeup_dl wakeup_rt wakeup preemptirqsoff preemptoff irqsoff function nop

root@localhost:/mnt/samba/tmp# echo nop > /sys/kernel/debug/tracing/current_tracer
root@localhost:/mnt/samba/tmp# echo function_graph > /sys/kernel/debug/tracing/current_tracer
root@localhost:/mnt/samba/tmp# echo function > /sys/kernel/debug/tracing/current_tracer



#开始采集
echo 1 > /sys/kernel/debug/tracing/tracing_on

#如有需要可以在采集期间执行某些用户程序
"$@"

#停止采集
echo 0 > /sys/kernel/debug/tracing/tracing_on


#保存结果后使用chrome://tracing/ 打开trace.txt
cat /sys/kernel/debug/tracing/trace > trace.txt


echo 0 > /sys/kernel/debug/tracing/tracing_on
echo nop > /sys/kernel/debug/tracing/current_tracer
echo function_graph > /sys/kernel/debug/tracing/current_tracer
echo dma_map_page_attrs > /sys/kernel/debug/tracing/set_graph_function
echo 1 > /sys/kernel/debug/tracing/tracing_on
"$@"
echo 0 > /sys/kernel/debug/tracing/tracing_on
cat /sys/kernel/debug/tracing/trace > trace.txt
vim -S ~/.fungraph-vim trace.txt

按za: